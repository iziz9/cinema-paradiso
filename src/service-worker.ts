/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { onBackgroundMessage } from 'firebase/messaging/sw'
import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
import { messaging } from './firebase-messaging-sw'

declare const self: ServiceWorkerGlobalScope

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 })
    ]
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.

const movieCache = 'movieCache'
const contentToCache = ['logo.webp', 'banner.webp']

self.addEventListener('install', (event) => {
  console.log('서비스워커 설치중')
  event.waitUntil(
    caches.open(movieCache).then((cache) => {
      console.log('서비스워커 캐싱 : contentToCache')
      return cache.addAll(contentToCache)
    })
  )
})
self.addEventListener('waiting', (event) => {
  console.log('서비스워커 설치완료')
})
self.addEventListener('activate', (event) => {
  console.log('서비스워커 활성화')
  // 불필요한 캐시 삭제
  event.waitUntil(
    caches.keys().then(function (keyList) {
      return Promise.all(
        keyList.map((key) => {
          if (movieCache.indexOf(key) === -1) {
            return caches.delete(key)
          }
          return []
        })
      )
    })
  )
})
self.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET') return // 임시 - post요청 캐싱 가능여부 확인 필요

  event.respondWith(
    caches.match(event.request).then((resource) => {
      //캐시를 새로운 데이터와 비교해 캐싱 리소스가 있으면 이를 반환, 없다면 fetch 진행
      return (
        resource ||
        fetch(event.request).then(async (response) => {
          const cache = await caches.open(movieCache)
          console.log('서비스워커가 새로운 리소스를 캐싱합니다.' + event.request.url)
          cache.put(event.request, response.clone()) //응답 저장
          return response
        })
      )
    })
  )
})

onBackgroundMessage(messaging, (payload) => {
  console.log('백그라운드 메시지 수신: ', payload)

  if (!payload.data) return

  const notificationTitle = payload.data.title
  const notificationOptions = {
    body: payload.data.body
  }

  self.registration.showNotification(notificationTitle, {
    body: notificationOptions.body
  })
})
